## Command Line Interface (CLI)

Began learning of how to use CLI for file managment and automation through overthewire.org and community assistance
Here are my on going notes.

----

tools:

man find	brings up manual 
whoami	find what user I am
pwd	tells me the directory I am in
Ls	list
cd	change directory
cat	Open / read
file	Determines type of file format
du	Disk usage
find	Searches for files and directories in a directory hierarchy
chmod	Change permission
grep	You can also search for a given text in the content of the files as well.
mkdir	Creates a new directory
	• find /path/to/search -name "filename.txt"

Options:
Followed by a single – for a letter.
Long form options are double dash –help

ls -lah  # List all files with details and human-readable sizes
	L long list: shows details like permissions and timestamps.
a: Show all files, including hidden ones.
h: Human-readable sizes (useful with -l), like 5K, 1M instead of raw bytes.
rm -rf /path/to/directory  # Force delete a directory and its contents
	rm (Remove Files or Directories)
		• -r: Recursive; deletes directories and their contents.
		• -f: Force; deletes without asking for confirmation.
cp -ru source/ destination/  # Copy only updated files to the destination
	cp (Copy Files and Directories)
		• -r: Recursive; needed to copy directories.
		• -i: Interactive; asks before overwriting files.
		• -u: Update; copies only if the source file is newer or the destination file doesn’t exist.
find . -type f -name "*.txt" -exec rm {} \;  # Find and delete all .txt files
	find (Search for Files)
		• -name: Find files by name.
		• -type: Specify file type (e.g., f for files, d for directories).
		• -exec: Run a command on each file found (e.g., delete).
grep -in "search term" filename  # Case-insensitive search with line numbers
	grep (Search Text)
		• -i: Ignore case (makes the search case-insensitive).
		• -r: Recursive; searches files within subdirectories.
		• -n: Show line numbers with matched lines.
grep -r -H "database" *
	This will make grep look recursively (-r option) and provide the result in a human-readable format (-H option) for the string “database” in all (*) files under the current working director


$ ls 
	readme
$ cat readme
	The password you are looking for is: ZjLjTmM6FvvyRnrb2rfNWOZOTa6ip5If
	
	
	

Learn Command Line | overthewire.org
First, if you know a command, but don’t know how to use it, try the manual (man page) by entering man <command>. 
	For example, man ls to learn about the “ls” command. The “man” command also has a manual, try it! When using man, press q to quit (you can also use / and n and N to search).
Second, if there is no man page, the command might be a shell built-in. In that case use the “help <X>” command. 
	E.g. help cd
Also, your favorite search-engine is your friend. Learn how to use it! I recommend Google.
Lastly, if you are still stuck, you can join us via chat | Asking smartly

---
Bandit Level 0
Level Goal
The goal of this level is for you to log into the game using SSH. The host to which you need to connect is bandit.labs.overthewire.org, on port 2220. The username is bandit0 and the password is bandit0. Once logged in, go to the Level 1 page to find out how to beat Level 1.
 
[run Shell as ADMIN] | Starting an SSH

#connect to a host
ssh -p2220 bandit0@bandit.labs.overthewire.org

[Passwords may not show up on shell when I type them]

Level Goal
The password for the next level is stored in a file called readme located in the home directory. Use this password to log into bandit1 using SSH. Whenever you find a password for a level, use SSH (on port 2220) to log into that level and continue the game.

Cope / paste


Level 1
SSH
https://manpages.ubuntu.com/manpages/noble/man1/ssh.1.html


How to use SSH: https://www.wikihow.com/Use-SSH
Cat – or cat -- "-" 
	Puts it in echo mode
	-> Ctrl + d takes it out

Problem	Directory named dash: -
Solution	Nano ./-
Explanation	Single dash ("-") can be treated as a flag for the command itself
adding "./" explicitly tells system to look for file in current directory, not as a command option
comment	I am unsure If I needed to place as nano?
I think it opens it in a text editor application
Problem faced:  directory named -
	Made the system think it is a an option



Cd - 
	Means I will go back one directory
Cd -- "[]"
	• States that you should put no flags ?


Level 2

https://linuxhandbook.com/filename-spaces-linux/

Problem	Spaces in the file name
Solution	" " around the name
Explanation	
comment	


Level 3
The password for the next level is stored in a hidden file in the inhere directory.
Inhere is a directory


Files starting by .
	Are a hidden file
Ls –a
	View all might show them 
	
-> $ cat ~/inhere/...Hiding-From-You

Problem	Hidden file in directory called inhere
Solution	Found it by stating file Inhere. 
Then read it $ cat ~/inhere/...Hiding-From-You
Explanation	I am stating the path I want to go to, so it bypasses the .. which would move directory
comment	

Level 4.
The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the “reset” command.



Problem	The files names start with -
Solution 	Like in level 2 I can use ./
file ./*

allows me to see which is human readable ASCII
comment	file: helps determine the type of a file and its data
* is also wildcard to pull

Level 5. 


Level Goal
The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties:
	human-readable
	1033 bytes in size
	not executable

-> I just looked into options it seems 




Problem	I need to find a file with 1033 bytes
and permission that excludes x in its permission
human readable
Solution 	Ls -Rlah 
comments	Moving directory into the one I need to look at then listing files recursively with options and utilizing lah means I can see which files are 1.1k
1.1k = 1033 bytes
also ensuring the file permission doesn't have x

nonhuman is regarding the files size in KB rather than in bytes. Not that it is hidden

Potential files 
./maybehere06/-file2
	-rw-r----- 1 root bandit5 1.1K Sep 19 07:08 –file2

./maybehere07/.file2
	-rw-r-----  1 root bandit5 1.1K Sep 19 07:08 .file2

-> Ultimate file was maybehere07/.file2
	~$ cat ./inhere/maybehere07/.file2

First permission 1st char indicates files type 
	-,d,l
- = regular file
d = directory
l = symbolic link (a file that points to another file or direectory)
Next 3 characters show owner permission
Next 3 characters show group permission
Next 3 characters show everyone's permission
	Permission order ifs r,w,x
r = read
	W = write
	X = execute

For the prompt given, it sounds like ./maybehere07/.file2 might be more accurate as the correct file based on these key points: 
The . in .file2 indicates that it’s a hidden file, which often fits the style of CTF challenges where the correct file is slightly harder to find.
Hidden files are commonly used in CTFs to add an extra layer of difficulty.





Level 6
The password for the next level is stored somewhere on the server and has all of the following properties:
 
owned by user bandit7
owned by group bandit6
33 bytes in size



find -user bandit7 -size 33c
I am bandit6
->  find

Problem	I started off in the home directory of bandit6
so I need to go to working directory (pwd) of root to find user of bandit7
-> since it most likely in a tree structure where bandit7's stuff is in bandit 7's directory
Solution	find -user bandit7 -group bandit6 -size 33c 2>/dev/null
notes	I utilized 2>/dev/null to suppress all the permission denied to get the file that I do have access to

I am the bandit6 user






Level 7

Level Goal
The password for the next level is stored in the file data.txt next to the word millionth
 
Commands you may need to solve this level
man, grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd
grep "string" file name

Problem	Cat data.txt brought forward lots of clutter
	
Solution	Grep "millionth" data.txt
Explanation	Grep print lines that match patterns
comments	

Cat data.txt brought forward lots of clutter


Level 8

The password for the next level is stored in the file data.txt and is the only line of text that occurs only once
 

Commands you may need to solve this level
grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd
 
Helpful Reading Material
Piping and Redirection

Problem	We need to be able to see which line only appears once. 
the problem is that technically in its own sense each line only appears once
Solution	sort data.txt | uniq -u
Explanation	Piping (|):  allows us to complete one command and then chain it to the next
	        This one allows us to sort all lines together than through it through unique to display only unique lines
comments	Step 1: When doing one command line of  uniqu –u
to print only unique lines than doing uniq –c to to see the count I noticed that it stated each line was unique. As it was reading them one by one and taking it as its own mini file
	
	

What is Piping?
	• Piping is done with the | symbol.
	• It takes the output from one command and "pipes" it into the next command.
	• This allows you to chain multiple commands together, creating a streamlined workflow where each command builds on the result of the previous one.

Level 9
Level Goal
The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several ‘=’ characters.
 
Commands you may need to solve this level
grep, sort, uniq, strings, base64, tr, tar, gzip, bzip2, xxd


Echo "this is fun text" | Grep 'regex'
	-> passes the echoed text to grep to use regex on it
	
Step 1) grep '=*' data.txt
	Problem: grep: data.txt: binary file matches
Why This Happens
grep treats a file as binary if it encounters non-printable characters (such as those used in compiled files, images, etc.). Sometimes, even text files can be misidentified as binary if they contain unusual characters or encoding.
How to Handle It
1. Force grep to Treat the File as Text: Use the -a (or --text) option to tell grep to treat the file as a text file even if it has binary content.
bash
Copy code
grep -a 'your_pattern' data.txt

2. Suppress the "binary file matches" Message: You can add the -I option, which tells grep to ignore binary files altogether, so it won’t print a match or message for binary files.
bash
Copy code
grep -I 'your_pattern' data.txt

Step 2) use strings which sifts through binary data to find and display sequences of printable characters.
Step 3) pipe it to regex to find what has multiple = preceding it 
	To utilize this I need to use options –E or –P
		-E is most likely what I should use unless I want to use some more advance regex (perl)
	It seems that there will probably be spacing between the flag and the preceeding char =
		Use \s


Grep –a '=+\s'
strings data.txt
$ strings data.txt | grep -E '=+\s'










